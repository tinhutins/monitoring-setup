---
- name: Add an Apt Docker signing key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg
  when: ansible_os_family == "Debian"

- name: Register Debian Destribution
  shell: lsb_release -cs
  register: lsb_release
  when: ansible_os_family == "Debian"

- name: Register Debian Arhitecture
  shell: dpkg --print-architecture
  register: arch
  when: ansible_os_family == "Debian"

- name: Add specified repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ arch.stdout }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable"
    state: present
    filename: docker
  when: ansible_os_family == "Debian"

- name: Install pip3
  package:
    name:
      - python3-pip
    state: latest

- name: Install or upgrade pip packages
  pip:
    name:
      - docker==6.0.1
      - docker-compose==1.29.2
      - pyyaml==5.4.1
    executable: pip3

- name: Get running containers
  docker_host_info:
    containers: yes
  register: docker_info

- name: Destroy stopped containers
  docker_container:
    name: "{{ item }}"
    state: absent
  loop: "{{ docker_info.containers | map(attribute='Id') | list }}"

- name: Remove docker packages if already installed
  apt:
    name: "docker*"
    state: absent

- name: Remove podman packages if already installed
  apt:
    name: "podman*"
    state: absent
  ignore_errors: True

- name: Remove docker files if they exist
  file:
    name: "{{ item }}"
    state: absent
  loop:
    - '/var/lib/docker'
    - '/var/run/docker.sock'
    - '/usr/bin/docker-compose'

# Reboot after docker is removed
- name: Reboot host
  reboot:
    connect_timeout: "{{ reboot_connect_timeout }}"
    post_reboot_delay: "{{ reboot_post_reboot_delay }}"
    reboot_timeout: "{{ reboot_timeout }}"
  
- name: Create docker directory if does not exist
  file:
    path: /var/lib/docker
    state: directory
    mode: '0755'

- name: Install docker
  apt:
    name: "{{ docker_ce_version }}"
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Install docker-compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    dest: /usr/bin/docker-compose
    mode: '0744'
  when: ansible_os_family == "Debian"
  
- name: Create monitoring dir if does not exist
  file:
    path: /root/monitoring
    state: directory
    mode: '0755'

- name: Copy docker-compose config files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/root/monitoring/{{ item }}.yml"
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  loop:
    - docker-compose

#Grafana
- name: Create grafana directory if it does not exist
  ansible.builtin.file:
    path: /root/monitoring/grafana
    state: directory
    mode: '0755'

- name: Copy grafana monitoring files
  copy:
    src: "grafana/{{ item }}"
    dest: "/root/monitoring/grafana/{{ item }}"
    owner: root 
    group: root
    mode: u=rw,g=rw,o=r
  loop:
    - "dashboards/"
  tags: dashboards_changed

- name: Copy grafana.ini template
  ansible.builtin.template:
    src: "grafana/grafana.ini.j2"
    dest: "/root/monitoring/grafana/grafana.ini"
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  tags: grafana_ini

- name: Create grafana directory structure
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /root/monitoring/grafana/datasources
    - /root/monitoring/grafana/dashboards
  tags: dashboards_changed

- name: Copy datasource.yaml from template
  ansible.builtin.template:
    src: grafana/datasource.j2
    dest: "/root/monitoring/grafana/datasources/datasource.yaml"
    owner: root
    group: root
    mode: u=rwx,g=rwx,o=rwx
  tags: dashboards_changed

#nginx
- name: Create nginx and ssl directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /root/monitoring/nginx/
    - /root/monitoring/nginx/ssl

- name: copy nginx.conf from template
  ansible.builtin.template:
    src: "nginx/nginx.j2"
    dest: "/root/monitoring/nginx/nginx.conf"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  tags: monitoring_nginx_conf_changed

- name: copy cert files from ansible-vault
  copy:
    content: "{{ item.content}}"
    dest: "/root/monitoring/nginx/ssl/{{ item.name }}"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  loop:
    - "{{ tino_certificate }}"
  tags: monitoring_ssl

- name: copy cert key files from ansible-vault 
  copy:
    content: "{{ item.content}}"
    dest: "/root/monitoring/nginx/ssl/{{ item.name }}"
    owner: root
    group: root
    mode: "u=rw,g=r,o="
  loop:
    - "{{ tino_certificate_key }}"
  tags: monitoring_ssl

#alertmanager and prometheus
- name: Create prometheus directory structure
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /root/monitoring/prometheus
    - /root/monitoring/prometheus/targets
  tags: prometheus_changed
    
- name: Copy prometheus config files
  ansible.builtin.template:
    src: "prometheus/{{ item }}.j2"
    dest: "/root/monitoring/prometheus/{{ item }}.yml"
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  loop:
    - prometheus
  tags: prometheus_changed

- name: Create an alertmanager templates directory
  ansible.builtin.file:
    path: /root/monitoring/alertmanager/templates
    state: directory
    mode: '0755'
  tags: alerts_changed

- name: Copy templates with owner and permissions
  ansible.builtin.copy:
    src: "alertmanager/mail/{{ item }}"
    dest: /root/monitoring/alertmanager/templates/
    owner: root
    group: root
    mode: '0755'
  loop:
    - "email.tmpl"
    - "email.firing.html.tmpl"
    - "email.resolved.html.tmpl"
  tags: alerts_changed

- name: Copy alert config files
  ansible.builtin.template:
    src: "alertmanager/alertmanager.j2"
    dest: "/root/monitoring/alertmanager/alertmanager.yml"
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  tags: alerts_changed

- name: Copy alertmanager running on monitoring server target file to prometheus
  ansible.builtin.copy:
    src: "monitoring-alertmanager-target.yml"
    dest: "/root/monitoring/prometheus/targets/monitoring-alertmanager-target.yml"
    owner: root
    group: root
    mode: u=rw,g=rw,o=r
  tags: alerts_changed

- name: Create rules prometheus directory if it does not exist
  ansible.builtin.file:
    path: /root/monitoring/prometheus/rules/
    state: directory
    mode: '0755'
  tags: alerts_changed

- name: Copy alertmanager rules files with wildcard matching
  ansible.builtin.copy:
    src: "alertmanager/{{ item }}"
    dest: /root/monitoring/prometheus/rules
    owner: root
    group: root
    mode: '0755'
  loop:
    - "rules/"
  tags: alerts_changed

#run monitoring stack with docker-compose
- name: Delete existing monitoring services if exist
  community.docker.docker_compose:
    project_src: /root/monitoring/
    state: absent

- name: Create and start monitoring services
  community.docker.docker_compose:
    project_src: /root/monitoring/
  register: output

- ansible.builtin.debug:
    var: output

- name: Restart all services
  community.docker.docker_compose:
    project_src: /root/monitoring/
    build: no
    services:
      - monitoring-prometheus
      - monitoring-alertmanager
      - monitoring-grafana
    restarted: yes
  tags: [ 'never', 'alerts_changed', 'dashboards_changed', 'prometheus_changed' ]
