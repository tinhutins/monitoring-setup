global:
  # ResolveTimeout is the default value used by alertmanager if the alert does
  # not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
  # This has no impact on alerts from Prometheus, as they always include EndsAt.
  resolve_timeout: 5m
  smtp_require_tls: false
  smtp_hello: cratis.cloud

route:
  receiver: alerting-email
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use the special value '...' as the sole label name, for example:
  # group_by: ['...']
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping.
  group_by: [alertname]
  # How long to initially wait to send a notification for a group
  # of alerts. Allows to wait for an inhibiting alert to arrive or collect
  # more initial alerts for the same group. (Usually ~0s to few minutes.)
  group_wait: 30s
  # How long to wait before sending a notification about new alerts that
  # are added to a group of alerts for which an initial notification has
  # already been sent. (Usually ~5m or more.)
  group_interval: 5m
  # How long to wait before sending a notification again if it has already
  # been sent successfully for an alert. (Usually ~3h or more).
  repeat_interval: 4h

templates:

- /etc/alertmanager/templates/*.tmpl

receivers:
- name: alerting-email
  email_configs:
  - to: devops@cratis.hr
    from: marker-swarm-alerts@cratis.cloud
    smarthost: smtp.cratis.cc:25
    hello: cratis.cloud
    send_resolved: true
    html: '{{ template "email.html" . }}'
